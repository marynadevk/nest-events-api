name: Reusable Deployment Workflow

on:
  workflow_call:
    inputs:
      environment:
        description: 'The environment to deploy to (dev or prod)'
        required: true
        type: string
      runner-label:
        description: 'The label for the self-hosted runner'
        required: true
        type: string
      DB_HOST:
        required: true
        type: string
      DB_PORT:
        required: true
        type: string
      AUTH_EXPIRES_IN:
        required: true
        type: string
      DB_DROP_SCHEMA:
        required: true
        type: string
      PORT:
        required: true
        type: string
    secrets:
      DB_USER:
        required: true
      DB_PASSWORD:
        required: true
      DB_NAME:
        required: true
      AUTH_SECRET:
        required: true


jobs:
  build-and-deploy:
    runs-on: ${{ inputs.runner-label }}
    environment: ${{ inputs.environment }}
        

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Cache npm dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Create .env file
        uses: SpicyPizza/create-envfile@v2.0.3
        with:
          envkey_DB_HOST: ${{ vars.DB_HOST }}
          envkey_DB_PORT: ${{ vars.DB_PORT }}
          envkey_DB_USER: ${{ secrets.DB_USER }}
          envkey_DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          envkey_DB_NAME: ${{ secrets.DB_NAME }}
          envkey_AUTH_SECRET: ${{ secrets.AUTH_SECRET }}
          envkey_AUTH_EXPIRES_IN: ${{ vars.AUTH_EXPIRES_IN }}
          envkey_DB_DROP_SCHEMA: ${{ vars.DB_DROP_SCHEMA }}
          envkey_PORT: ${{ vars.PORT }}
          directory: ./
          file_name: .env
          fail_on_empty: false
          sort_keys: false

      - name: Run Docker Compose
        run: docker compose up -d

      - name: Start application
        run: |
          if pm2 describe events-app > /dev/null; then
            pm2 restart events-app --update-env
          else
            pm2 start ./dist/main.js --name=events-app
          fi
